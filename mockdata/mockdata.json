[
  {
    "Id": 3,
    "Title": "Reverse Words in a String",
    "Language": "js",
    "Code": "\n// Given an input string s, reverse the order of the words.\n\n// A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n\n// Return a string of the words in reverse order concatenated by a single space.\n\n// Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n \n\nconst reverseWords = function(s) {\n    return s.trim().replace(/\\s{2,}/g, ' ').split(' ').reverse().join(' ')\n};\n\nconst testCase1 = \"a good   example\"\nconst testCase2 = \"  hello world  \"\nconst testCase3 = \"The sky is blue\"\n\nconsole.log(reverseWords(testCase1) === \"example good a\");\nconsole.log(reverseWords(testCase2) === \"world hello\");\nconsole.log(reverseWords(testCase3) === \"blue is sky The\");\n",
    "UserId": "672",
    "Created_at": "2023-12-02T08:14:28.389-08:00",
    "UpdatedAt": "2024-01-09T09:46:30.678-08:00"
  },
  {
    "Id": 5,
    "Title": "Fibonacci",
    "Language": "go",
    "Code": "package main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) []int {\n    fibs := make([]int, n+1)\n    fibs[0], fibs[1] = 0, 1\n\n    for i := 2; i \u003c= n; i++ {\n        fibs[i] = fibs[i-1] + fibs[i-2]\n    }\n\n    return fibs\n}\n\nfunc main() {\n    fmt.Println(fibonacci(20)) // prints: [0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765]\n}",
    "UserId": "672",
    "Created_at": "2023-12-02T13:37:30.788-08:00",
    "UpdatedAt": "2023-12-02T14:02:44.116-08:00"
  },
  {
    "Id": 4,
    "Title": "Move Zeroes",
    "Language": "py",
    "Code": "# Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\n# Note that you must do this in-place without making a copy of the array.\n\ndef move_zeroes(nums):\n    # Initialize the position for the next non-zero element\n    next_pos = 0\n\n    # Iterate over the list\n    for i in range(len(nums)):\n        # If the current element is not zero\n        if nums[i] != 0:\n            # Move the non-zero element to the next position\n            nums[next_pos] = nums[i]\n            # Increment the position for the next non-zero element\n            next_pos += 1\n\n    # Fill the rest of the list with zeroes\n    for i in range(next_pos, len(nums)):\n        nums[i] = 0\n\n    return nums\n\n# Test cases\nprint(move_zeroes([0, 1, 0, 3, 12]))  # Expected output: [1, 3, 12, 0, 0]\nprint(move_zeroes([0, 0, 1]))  # Expected output: [1, 0, 0]",
    "UserId": "672",
    "Created_at": "2023-12-02T13:31:58.842-08:00",
    "UpdatedAt": "2023-12-02T14:22:23.896-08:00"
  },
  {
    "Id": 10,
    "Title": "Reverse Order",
    "Language": "js",
    "Code": "// Given an input string s, reverse the order of the words.\n\n// A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n\n// Return a string of the words in reverse order concatenated by a single space.\n\n// Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n \n\nconst reverseWords = function(s) {\n    return s.trim().replace(/\\s{2,}/g, ' ').split(' ').reverse().join(' ')\n};\n\nconst testCase1 = \"a good   example\"\nconst testCase2 = \"  hello world  \"\nconst testCase3 = \"The sky is blue\"\n\nconsole.log(reverseWords(testCase1) === \"example good a\");\nconsole.log(reverseWords(testCase2) === \"world hello\");\nconsole.log(reverseWords(testCase3) === \"blue is sky The\");\n\n\n",
    "UserId": "17",
    "Created_at": "2023-12-12T19:30:52.028-08:00",
    "UpdatedAt": "2023-12-12T19:30:52.028-08:00"
  },
  {
    "Id": 11,
    "Title": "First",
    "Language": "rb",
    "Code": "c = 0\nloop do \n  puts \"fnord\"\n  c += 1\n  break if c == 5\nend\n#cool\np (0..9).to_a\nhash = Hash.new(0)\np hash\nhash[:fnord] = 22\np hash[:fnord] += 1\np hash",
    "UserId": "1177",
    "Created_at": "2023-12-20T21:55:36.515-08:00",
    "UpdatedAt": "2023-12-20T21:55:36.515-08:00"
  },
  {
    "Id": 12,
    "Title": "Second",
    "Language": "rb",
    "Code": "c = 0\nloop do \n  puts \"fnord\"\n  c += 1\n  break if c == 5\nend\n#cool\np (0..9).to_a\nhash = Hash.new(0)\np hash\nhash[:fnord] = 22\np hash[:fnord] += 1\np hash",
    "UserId": "1177",
    "Created_at": "2023-12-20T21:56:09.623-08:00",
    "UpdatedAt": "2023-12-20T21:56:09.623-08:00"
  },
  {
    "Id": 13,
    "Title": "JS101",
    "Language": "js",
    "Code": "let foo = 6;\nconst bar = 8;\n\nconsole.log(foo);\nconsole.log(bar);",
    "UserId": "1192",
    "Created_at": "2023-12-29T14:33:03.186-08:00",
    "UpdatedAt": "2023-12-29T14:33:03.186-08:00"
  },
  {
    "Id": 15,
    "Title": "Reverse String",
    "Language": "js",
    "Code": "/*\nWrite a function that reverses a string. The input string is given as an array of characters s.\nYou must do this by modifying the input array in-place with O(1) extra memory.\n\nExample 1:\n\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n\nExample 2:\n\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n \n\nConstraints:\n\n    1 \u003c= s.length \u003c= 105\n    s[i] is a printable ascii character.\n\n*PEDAC*\n- start with pointers at beginning and end of array\n- start a loop that continues while pointers are not the same index\n  - init temp variable to value of 'right' pointer \n  - reassign 'right' pointer to equal current value at 'left' pointer\n  - reassign 'left' pointer to 'temp' value\n  - increment left pointer, decrement right pointer\n- return given input array\n*/\n\nvar reverseString = function(s) {\n  let left = 0;\n  let right = s.length - 1;\n\n  while (left \u003c right) {\n    let temp = s[right];\n    s[right] = s[left];\n    s[left] = temp;\n    left += 1;\n    right -= 1;\n  }\n  return s;\n};\n\nconsole.log(reverseString([\"h\",\"e\",\"l\",\"l\",\"o\"])) // [\"o\",\"l\",\"l\",\"e\",\"h\"]\nconsole.log(reverseString([\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"])) // [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\nconsole.log(reverseString([\"a\", \"s\"])) // [\"s\", \"a\"]",
    "UserId": "1308",
    "Created_at": "2024-01-09T09:44:53.526-08:00",
    "UpdatedAt": "2024-01-09T09:46:08.309-08:00"
  },
  {
    "Id": 14,
    "Title": "Reverse String",
    "Language": "js",
    "Code": "/*\nWrite a function that reverses a string. The input string is given as an array of characters s.\nYou must do this by modifying the input array in-place with O(1) extra memory.\n\nExample 1:\n\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n\nExample 2:\n\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n \n\nConstraints:\n\n    1 \u003c= s.length \u003c= 105\n    s[i] is a printable ascii character.\n\n*PEDAC*\n- start with pointers at beginning and end of array\n- start a loop that continues while pointers are not the same index\n  - init temp variable to value of 'right' pointer \n  - reassign 'right' pointer to equal current value at 'left' pointer\n  - reassign 'left' pointer to 'temp' value\n  - increment left pointer, decrement right pointer\n- return given input array\n\n*/\n\nvar reverseString = function(s) {\n  let left = 0;\n  let right = s.length - 1;\n\n  while (left \u003c right) {\n    let temp = s[right];\n    s[right] = s[left];\n    s[left] = temp;\n    left += 1;\n    right -= 1;\n  }\n  return s;\n};\n\nconsole.log(reverseString([\"h\",\"e\",\"l\",\"l\",\"o\"])) // [\"o\",\"l\",\"l\",\"e\",\"h\"]\nconsole.log(reverseString([\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"])) // [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\nconsole.log(reverseString([\"a\", \"s\"])) // [\"s\", \"a\"]",
    "UserId": "672",
    "Created_at": "2024-01-09T09:41:26.742-08:00",
    "UpdatedAt": "2024-01-09T09:46:08.141-08:00"
  },
  {
    "Id": 17,
    "Title": "Sorted Squares",
    "Language": "js",
    "Code": "/*\nGiven an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n\nConstraints:\n    1 \u003c= nums.length \u003c= 104\n    -104 \u003c= nums[i] \u003c= 104\n    nums is sorted in non-decreasing order.\n*/\n\n\nvar sortedSquares = function(nums) {\n  let left = 0;\n  let right = nums.length - 1;\n  let resArr = new Array(nums.length);\n\n  for (let i = resArr.length - 1; i \u003e= 0; i--)\n    if (nums[left]**2 \u003e nums[right]**2 ) {\n      resArr[i] = (nums[left]**2)\n      left++\n    } else {\n      resArr[i] = (nums[right]**2)\n      right--\n    }\n  \n  return resArr;\n};\n\nconsole.log(sortedSquares([-4, -1, 0, 3, 10])) // [0,1,9,16,100]\nconsole.log(sortedSquares([-7,-3,2,3,11])) // [4,9,9,49,121]\n",
    "UserId": "672",
    "Created_at": "2024-01-09T10:37:02.53-08:00",
    "UpdatedAt": "2024-01-09T10:49:51.6-08:00"
  },
  {
    "Id": 16,
    "Title": "Sorted Squares",
    "Language": "js",
    "Code": "/*\nGiven an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n\nConstraints:\n    1 \u003c= nums.length \u003c= 104\n    -104 \u003c= nums[i] \u003c= 104\n    nums is sorted in non-decreasing order.\n*/\n\nvar sortedSquares = function(nums) {\n  let left = 0;\n  let right = nums.length - 1;\n  let resArr = new Array(nums.length);\n\n  for (let i = resArr.length - 1; i \u003e= 0; i--)\n    if (nums[left]**2 \u003e nums[right]**2 ) {\n      resArr[i] = (nums[left]**2)\n      left++\n    } else {\n      resArr[i] = (nums[right]**2)\n      right--\n    }\n  \n  return resArr;\n};\n\nconsole.log(sortedSquares([-4, -1, 0, 3, 10])) // [0,1,9,16,100]\nconsole.log(sortedSquares([-7,-3,2,3,11])) // [4,9,9,49,121]\n",
    "UserId": "1308",
    "Created_at": "2024-01-09T10:36:13.7-08:00",
    "UpdatedAt": "2024-01-09T10:50:42.657-08:00"
  },
  {
    "Id": 18,
    "Title": "Subarray Product Less Than K",
    "Language": "js",
    "Code": "/*\nGiven an array of integers nums and an integer k, return the number of contiguous subarrays where the product \nof all the elements in the subarray is strictly less than k\n\nConstraints:\n    1 \u003c= nums.length \u003c= 3 * 104\n    1 \u003c= nums[i] \u003c= 1000\n    0 \u003c= k \u003c= 106\n*/\n\nvar numSubarrayProductLessThanK = function(nums, k) {\n  let left = 0;\n  let validSubarrays = 0;\n  let currentProduct = 1;  \n\n  for (let right = 0; right \u003c nums.length; right++) {\n    currentProduct *= nums[right]\n\n    while (currentProduct \u003e= k) {\n      if (left \u003e right) return validSubarrays;\n      currentProduct /= nums[left]\n      left += 1;\n    }\n    validSubarrays += ((right - left) + 1)\n  }\n  return validSubarrays;\n};\n\nconsole.log(numSubarrayProductLessThanK([10,5,2,6], 100)) // 8\nconsole.log(([1, 2, 3], 0)) // 0",
    "UserId": "1308",
    "Created_at": "2024-01-11T09:09:26.615-08:00",
    "UpdatedAt": "2024-01-11T09:09:26.615-08:00"
  }
]